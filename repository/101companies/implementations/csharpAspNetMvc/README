== Intent ==

a simple [[Techology:ASP .NET]] implementation in [[Language:CSharp|C#]] for the [[Technology:.NET]] Framework

== Languages ==

* [[Language:CSharp]] (C#): Programming language used for all code (Version 4.0)

== Technologies ==

* [[Technology:csc.exe]]: C# compiler (Version 4.0)
* [[Technology:.NET]]: framework used to execute compiled code (Version 4.0)
* [[Technology:NUnit]]: unit testing framework used for testing (Version 2.5)
* [[Technology:Visual Studio]]: optional IDE (Version 2010)

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Navigation]]

== Motivation == 

A Web implementation in ASP .NET MVC 3.0; shows the basic features of MVC framework; in particular URL routing mapping to controllers and model/view binding.
The implementation also serves as a reference solution for MVC framework for statically typed programming languages (e.g. C#, VB .NET) which also motivates its appearance in the GUI theme.

== Illustration ==

When we speak about MVC Framework for the Web, there are 2 major components are considered:

1. Mapping URIs to handlers (essentially methods) in a source code. In ASP .NET MVC this called "routing" (http://msdn.microsoft.com/en-us/library/cc668201.aspx). Reflection plays an important part in the mapping workflow. A good detailed explanation can be found at http://msdn.microsoft.com/en-us/magazine/dd695917.aspx

2. Template engine (ofter they called "view engines") which allows using target language inside the "view" to generate html parts from the model. ASP .NET MVC, for instance, supports two such engines: aspx and razor (http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx).
Razor allows using C#/VB.NET inside the template by using special code blocks. This code is used by a framework to dynamically generate HTML by means of runtime code generation.
Another important aspect, is how the actual model is binded to such template engine. As soon as the view itself is fully dynamic, traditionally in ASP .NET a dictionary was used to store the model and access it by key from the view code block. When a "dynamic" concept (http://msdn.microsoft.com/en-us/library/dd264741.aspx) was introduced in C# 4.0, it enabled an option making a model available for a view bypassing compile-time checking. Runtime code generation is used to execute all code blocks in a view engine and produce the actual HTML code.

'''Route mapping'''

To set up routes we need to implement class derived from System.Web.HttpApplication

<syntaxhighlight lang=csharp>
public class MvcApplication : System.Web.HttpApplication
</syntaxhighlight>

There is a method which executed 

<syntaxhighlight lang=csharp>
protected void Application_Start()
{
  .....
  RegisterRoutes(RouteTable.Routes);
}
</syntaxhighlight>


Usually there is a need to force MVC to ignore some resources:

<syntaxhighlight lang=csharp>
routes.IgnoreRoute("{resource}.axd/{*pathInfo}");
</syntaxhighlight>


To map routes on controller's actions, the following method is used:
<syntaxhighlight lang=csharp>
 routes.MapRoute(
                "Default", // Route name
                "{controller}/{action}/{id}", // URL with parameters
                new { controller = "Home", action = "Index", id = UrlParameter.Optional } // Parameter defaults
             );
</syntaxhighlight>

When (if) the action index is reached, as a result it should return a view.
Default engine would search for the following locations:

* ~/Views/Home/Index.aspx
* ~/Views/Home/Index.ascx
* ~/Views/Shared/Index.aspx
* ~/Views/Shared/Index.ascx
* ~/Views/Home/Index.cshtml
* ~/Views/Home/Index.vbhtml
* ~/Views/Shared/Index.cshtml
* ~/Views/Shared/Index.vbhtml

'''Model binding'''

TODO

== Architecture ==

C# object-oriented representation of 101companies model is located in
the ''CompanyModel folder''. It contains classes with required
properties and methods (features implementations).
TODO

== Usage ==

Compile and run the project from Visual Sturio. Web browser opens automatically and shows the company page.

== Contributors ==

* {{101contributor|Andrei Varanovich|developer}}


[[Category:101implementation]]
[[Category:GUI theme]]