== Intent ==

[[Web programming]]  in [[Language:Ruby]] with [[Technology:Ruby on Rails]]

== Languages ==

* [[Language:Ruby]]
* [[Language:JavaScript]]
* [[Language:HTML]]
* [[Language:CSS]]

== Technologies == 

* [[Technology:Ruby on Rails]]

== Features ==

* [[101feature:Company]]
* [[101feature:Client/server]]
* [[101feature:Attribute editing]]
* [[101feature:Structural editing]]

== Motivation ==

We exercise [[Web programming]] using [[Technology:Ruby on Rails]]. That is, we use this MVC [[Category:Web-application framework]]  to provide  [[101feature:Attribute editing|attribute]] and [[101feature:Structural editing|structural editing]] of companies by using a dynamically typed language. We make use of several framework tools for generating code and migrating.

== Illustration ==

Most of the implementations code was generated using the ''rails generate scaffold'' command. This generates 
* A model for the given class and attributes
* A view including pages for editing, indexing and showing instances
* A controller for actions like creating, updating and removing of instances

We then used ''rake db:migrate'' to migrate the tables in the underlining database.

In the next section we will illustrate how routing rules and resources are defined.

=== Routes ===

The ''routes.rb'' file defines a default route when entering the application:

<syntaxhighlight lang="ruby>
get "home/index"
</syntaxhighlight>

That is, when entering by just providing "http://localhost:3000/" as a URL the user is redirected to the specified page.

This file also defines ruby resources:

<syntaxhighlight lang="ruby">
resources :employees

resources :departments do
  resources :departments
  resources :employees
end 

resources :companies do
  resources :departments
end
</syntaxhighlight>

These rules define what kind of resources the application contains and how these resources should be nested. For instance, a company resource has many department resources.

The framework also provides routes for both index pages and pages for showing a concrete instance. For companies these helpers are provided as follows:
* <syntaxhighlight lang="ruby" enclose="none">companies_path</syntaxhighlight> provides the URL for the index page for all companies.
* <syntaxhighlight lang="ruby" enclose="none">company_path(someCompany)</syntaxhighlight> provides the URL for the given company.

This example also shows the use of pluralisation for name conventions.

In the next section we will continue by illustration the binding between models and views.

=== Model/View binding ===

We will illustrate this topic by showing how one can add an employee to an existing department using the edit page for departments.

In the ''edit.html.erb'' template file for departments we define a form for adding an employee:

<syntaxhighlight lang="rails">
<%= form_for([@department, @department.employees.build]) do |f| %>
  <div class="field">
    <%= f.label :name %><br />
    <%= f.text_field :name %>
    Set as manager?
    <%= f.check_box :isManager %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>
</syntaxhighlight>

We use <syntaxhighlight lang="ruby" enclose="none">form_for</syntaxhighlight> to generate a form for a new employee. Submitting this form sends a request including the new employee in JSON and the department_id of the owning department. This behavior is caused by the fact that we added employees as a nested resource of departments. 

In the form <syntaxhighlight lang="ruby" enclose="none">f</syntaxhighlight> we then bind the name of the new employee to a textfield and the <syntaxhighlight lang="ruby" enclose="none">isManager</syntaxhighlight> property to a checkbox.

Submitting this form will call the employee controller's <syntaxhighlight lang="ruby" enclose="none">create</syntaxhighlight> method:

<syntaxhighlight lang="ruby">
def create
      @department = Department.find(params[:department_id])
      @employee = @department.employees.create(params[:employee])
      redirect_to department_path(@department)
  end
</syntaxhighlight>

This method starts by searching the department instance by the given id. It then calls the <syntaxhighlight lang="ruby" enclose="none">create</syntaxhighlight> method of the employees collection of this department. Finally the method redirects the user to this department.

== Architecture ==

The MVC code for this implementation can be found in [this!!companies/app]. The [this!!companies/app/models models] folder holds models for companies, departments and employees. The [this!!companies/app/controllers controllers] folder holds the controllers for actions like indexing, creating, updating and destroying of instances. The [this!!companies/app/views views] folder contains the views for all classes including editing, showing and indexing views.

The schema for the underlining database can be found in [this!!companies/db/schema.rb schema.rb]. The migration files in the [this!!companies/db/migrate migrate] folder.

The routing rules can be found in  [this!!companies/config/routes.rb routes.rb].

== Usage ==

* Run ''rails s'' in the project's root folder.
* Run ''rake db:migrate'' in the project's root folder

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}

[[Category:GUI theme]]