== Intent ==

[[web programming]] with [[Language:PHP]] and the [[Technology:Zend framework]]

== Languages ==

* [[Language:PHP]]
* [[Language:HTML]]
* [[Language:CSS]]

== Technologies ==

* [[Technology:Zend framework]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Interaction]]
* [[101feature:Persistence]]
* [[101feature:Precedence]]
* [[101feature:Validation]]

== Motivation ==

[[Language:PHP]] is one of the most common [[:Category:Language|languages]] for [[web programming]]. To get a more structured and valuable [[:Category:101implementation|implementation]], it is reasonable to choose a [[Language:PHP]] based [[:Category:web-application framework]]. The [[Technology:Zend framework]] provides a good infrastructure and a large amount of pre-assembled components.

== Illustration ==

The features [[101feature:Total]] and [[101feature:Cut]] are both implemented in the [this!!application/models/DbTable/Employee.php models/dbTables/Employee.php]-[[Model View Controller|model]]. The reason is, that these methods affect only employees, depend on the corresponding company or department. The automatic detection for the right data-table, provided by the variable ''$_name'' in the specific model, offers a simple structuring of the methods:

<syntaxhighlight lang="php" source="zend/application/models/DbTable/Employee.php" line>
protected $_name = 'employee';

...

public function getTotalForCompany($id) {
    $id = (int)$id;
    $rows = $this->fetchAll('cid = ' . $id);
    $total = 0;
    foreach ($rows as $row) {
        $total += $row->salary;
    }
    return $total;
}
</syntaxhighlight>

This method returns the total-value for a company with a given ''$id''.

[[:Category:Client]]-side can be easily implemented into the forms (e.g. [this!!application/forms/Employee.php forms/Employee.php]): TODO

== Architecture ==

* The architecture is strictly based on the [[Model View Controller|MVC]]-pattern. There are different folders for the models, the views and the controllers. This is fundamental, because the [[:Category:framework]] automatically identifies the classes and its concerns with the help of these folders.
* The adapter for the database connection is also automatically generated. The user only needs to configure the connection parameters and the nature of the adapter (e.g. for [[Technology:MySQL]], [[Technology:OracleDB]] etc.) in the [this!!application/configs/application.ini application.ini].
* [[Technology:Zend framework]] has a great support for form-based websites. That means, that it is possible to generate forms with almost no [[Language:HTML]]-Code, because the framework automatically generates the website out of the php-objects defined in a given form (e.g. [this!!application/forms/Employee.php forms/Employee.php]).

== Usage ==

* Download the implementation from the svn

This project needs a running [[Technology:MySQL]]-database. We recommend [[Technology:XAMPP]].
You can use the ''company.sql'' and ''sampleCompany.sql'' of [[101implementation:mySql]] for this project.

* Download and install [[Technology:XAMPP]]
* Open the "XAMPP Control Panel" and start "Apache" and "MySQL"
* Use the guideline of [[101implementation:mySql]] up to "Populate tables..."

After the database has started:

* Copy the complete zend folder to the htdocs-directory of your XAMPP-installation
* Start your [[:Category:Webbrowser]] and go to [http://localhost/zend/public/]

If you want to continue with the development of this [[:Category:101implementation]], please download [[Technology:NetBeans]] and import the project to this [[:Category:IDE]].

== Contributors ==

* {{101contributor|Tobias Zimmer|developer}}