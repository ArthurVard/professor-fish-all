== Intent ==

[[web programming]] with [[Language:Python]]

== Languages ==

* [[Language:Python]]
* [[Language:JavaScript]]
* [[Language:HTML]]

== Technologies ==

* [[Technology:Pyjamas]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Interaction]]
* [[101feature:Persistence]]
* [[101feature:Precedence]]
* [[101feature:Validation]]

== Motivation ==

[[Language:Python]] is a popular [[:Category:programming language]]. [[Technology:Pyjamas]] offers the possibility to generate pure [[Language:JavaScript]]-Code out [[Language:Python]]. The advantages of [[Technology:Pyjamas]] are, that it is very simple to understand. Apart from that, there is no need for complicate [[Language:HTML]]- or [[Language:JavaScript]]-programming. [[Technology:Pyjamas]] is easily combinable with [[Language:CSS]].

== Illustration ==

The [[101feature:cut]] and [[101feature:total]] features are implemented directly in the company, department and employee classes. The "self"-parameter for the methods represents the current object. The example for department looks like:

<syntaxhighlight lang="python" source="pyjamas/101Companies.py" line>
# The class for 101Companies departments
class Department:

	...
	
	# The total method for departments	
	def total(self):
		total = 0
		for employee in self.employees:
			total += employee.total()
		for department in self.departments:
			total += department.total()
		return total

	# The cut method for departments	
	def cut(self):
		for employee in self.employees:
			employee.cut()
		for department in self.departments:
			department.cut()

	...
</syntaxhighlight>

The [[101feature:Interaction|GUI]] is implemented directly with [[Technology:Pyjamas]]-libraries. There is a grid with all necessary components like labels, textfields, listboxes and buttons. Every class is translated directly to [[Language:JavaScript]] and the objects are initialized in the [[Language:JavaScript]]-context. The following method of '''101CompaniesAppGUI''' shows the initialization of the employee-[[101feature:Interaction|GUI]]:

<syntaxhighlight lang="python" source="pyjamas/101Companies.py" line>
# initializes the GUI for the employee view
def initEmployeeGUI(self):
	self.grid.clear()
	self.grid.resize(4, 3)
		
	# row 1
	self.grid.setWidget(0, 0, Label("Name:"))
	self.grid.setWidget(1, 0, Label("Address:"))
	self.grid.setWidget(2, 0, Label("Salary:"))
	
	# row 2
	self.grid.setWidget(0, 1, self.name)
	self.grid.setWidget(1, 1, self.address)
	self.grid.setWidget(2, 1, self.total)
		
	# row 3
	self.grid.setWidget(0, 2, self.save)
	self.grid.setWidget(2, 2, self.cut)
	self.grid.setWidget(3, 2, self.back)
		
	self.name.setText(self.current.name)
	self.address.setText(self.current.address)
	self.total.setText(self.current.salary)
</syntaxhighlight>

The textfields '''self.name''', '''self.address''' and '''self.total''' are initialized in the constructor of the '''101CompaniesAppGUI''' class.

== Architecture ==

Since there is only one file ([this!!101Companies.py]) for the whole application, the program is devided into three (five) main classes:

* The [[101feature:Company|company]]-structure is provided by the classes company, department and employee.
* The [[101feature:Interaction|GUI]] is provided by the class 101CompaniesAppGUI.
* The [[101feature:Company|company]]-initialization and the low-level management of the departments and employees is provided by the class 101CompaniesApp.

== Usage ==

* Download the sources
* Open [this!!output/101Companies.html] with your [[:Category:webbrowser]]

== Contributors ==

* {{101contributor|Tobias Zimmer|developer}}

[[Category:Web application]]